import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { FaArrowLeft, FaPlus, FaEdit, FaTrash, FaCog, FaCheck, FaChevronDown, FaChevronRight } from 'react-icons/fa';
import { 
  getCategoriesHierarchy,
  createCategory, 
  createSubcategory, 
  updateCategory, 
  updateSubcategory, 
  deleteCategory,
  deleteSubcategory 
} from '../services/categoryService';
import '../assets/styles/Settings.css';

// –ü–∞–ª–∏—Ç—Ä–∞ –∏–∑ 24 —Ü–≤–µ—Ç–æ–≤
const COLOR_PALETTE = [
  '#e74c3c', '#c0392b', '#d35400', '#e67e22',
  '#f39c12', '#f1c40f', '#27ae60', '#2ecc71',
  '#16a085', '#1abc9c', '#3498db', '#2980b9',
  '#9b59b6', '#8e44ad', '#34495e', '#2c3e50',
  '#95a5a6', '#7f8c8d', '#ff6b6b', '#4ecdc4',
  '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3'
];

const Settings = () => {
  const [activeTab, setActiveTab] = useState('hierarchy');
  const [categories, setCategories] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  const [showNewCategoryForm, setShowNewCategoryForm] = useState(false);
  const [showNewSubcategoryForm, setShowNewSubcategoryForm] = useState(null);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newSubcategoryName, setNewSubcategoryName] = useState('');
  const [newCategoryColor, setNewCategoryColor] = useState(COLOR_PALETTE[0]);
  const [newSubcategoryColor, setNewSubcategoryColor] = useState(COLOR_PALETTE[0]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const [editingCategory, setEditingCategory] = useState(null);
  const [editingSubcategory, setEditingSubcategory] = useState(null);
  const [editCategoryName, setEditCategoryName] = useState('');
  const [editSubcategoryName, setEditSubcategoryName] = useState('');
  const [editCategoryColor, setEditCategoryColor] = useState('');
  const [editSubcategoryColor, setEditSubcategoryColor] = useState('');

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const [collapsedCategories, setCollapsedCategories] = useState(new Set());

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
  const fetchCategories = async () => {
    try {
      setIsLoading(true);
      const data = await getCategoriesHierarchy();
      setCategories(data || []);
      
      // –°–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (data && data.length > 0) {
        const allCategoryIds = new Set(data.map(category => category.id));
        setCollapsedCategories(allCategoryIds);
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
      console.error(err);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    fetchCategories();
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const markAsChanged = () => {
    setHasUnsavedChanges(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const toggleCategoryCollapse = (categoryId) => {
    setCollapsedCategories(prev => {
      const newSet = new Set(prev);
      if (newSet.has(categoryId)) {
        newSet.delete(categoryId);
      } else {
        newSet.add(categoryId);
      }
      return newSet;
    });
  };

  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –ø–∞–ª–∏—Ç—Ä—ã —Ü–≤–µ—Ç–æ–≤
  const ColorPalette = ({ selectedColor, onColorSelect, className = '' }) => (
    <div className={`color-palette ${className}`}>
      {COLOR_PALETTE.map((color, index) => (
        <button
          key={index}
          type="button"
          className={`color-option ${selectedColor === color ? 'selected' : ''}`}
          style={{ backgroundColor: color }}
          onClick={() => onColorSelect(color)}
          title={color}
        />
      ))}
    </div>
  );

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCreateCategory = async () => {
    if (!newCategoryName.trim()) return;
    
    try {
      setIsLoading(true);
      await createCategory({
        name: newCategoryName.trim(),
        color: newCategoryColor
      });
      
      setNewCategoryName('');
      setNewCategoryColor(COLOR_PALETTE[0]);
      setShowNewCategoryForm(false);
      await fetchCategories();
      markAsChanged();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleCreateSubcategory = async (categoryId) => {
    if (!newSubcategoryName.trim()) return;
    
    try {
      setIsLoading(true);
      await createSubcategory({
        name: newSubcategoryName.trim(),
        category_id: categoryId,
        color: newSubcategoryColor
      });
      
      setNewSubcategoryName('');
      setNewSubcategoryColor(COLOR_PALETTE[0]);
      setShowNewSubcategoryForm(null);
      await fetchCategories();
      markAsChanged();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', err);
    } finally {
      setIsLoading(false);
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleEditCategory = async (categoryId) => {
    if (!editCategoryName.trim()) return;
    
    try {
      setIsLoading(true);
      await updateCategory(categoryId, {
        name: editCategoryName.trim(),
        color: editCategoryColor
      });
      
      setEditingCategory(null);
      setEditCategoryName('');
      setEditCategoryColor('');
      await fetchCategories();
      markAsChanged();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleEditSubcategory = async (subcategoryId) => {
    if (!editSubcategoryName.trim()) return;
    
    try {
      setIsLoading(true);
      await updateSubcategory(subcategoryId, {
        name: editSubcategoryName.trim(),
        color: editSubcategoryColor
      });
      
      setEditingSubcategory(null);
      setEditSubcategoryName('');
      setEditSubcategoryColor('');
      await fetchCategories();
      markAsChanged();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleDeleteCategory = async (categoryId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) return;
    
    try {
      setIsLoading(true);
      await deleteCategory(categoryId);
      await fetchCategories();
      markAsChanged();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const handleDeleteSubcategory = async (subcategoryId) => {
    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é?')) return;
    
    try {
      setIsLoading(true);
      await deleteSubcategory(subcategoryId);
      await fetchCategories();
      markAsChanged();
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
    } finally {
      setIsLoading(false);
    }
  };

  const renderProfileTab = () => (
    <div>
      <div className="row g-4">
        <div className="col-md-8">
          <h3 className="mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è</h3>
          
          <div className="card shadow-sm">
            <div className="card-body p-4">
              <div className="row g-4">
                <div className="col-md-4 text-center">
                  <div className="mb-4">
                    <div className="rounded-circle bg-primary d-inline-flex align-items-center justify-content-center profile-avatar">
                      üë§
                    </div>
                  </div>
                  <button className="btn btn-outline-primary btn-sm profile-avatar-btn">
                    –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
                  </button>
                </div>
                <div className="col-md-8 ps-4">
                  <div className="mb-4">
                    <label className="form-label mb-2">–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</label>
                    <input 
                      type="text" 
                      className="form-control" 
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      disabled
                    />
                  </div>
                  <div className="mb-4">
                    <label className="form-label mb-2">Email</label>
                    <input 
                      type="email" 
                      className="form-control" 
                      placeholder="user@example.com"
                      disabled
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderHierarchyTab = () => (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h3 className="mb-1">–†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π</h3>
          <p className="text-muted small mb-0">
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
          </p>
        </div>
        <button
          type="button"
          className="btn btn-primary add-category-btn"
          onClick={() => setShowNewCategoryForm(!showNewCategoryForm)}
          disabled={isLoading}
        >
          <FaPlus className="me-2" />
          –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        </button>
      </div>

      {error && (
        <div className="alert alert-danger">{error}</div>
      )}

      {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
      {showNewCategoryForm && (
        <div className="card mb-4 category-form-card">
          <div className="card-body category-form-body">
            <h5 className="category-form-title">–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h5>
            <div className="d-flex flex-column flex-md-row gap-2 align-items-stretch">
              <input
                type="text"
                className="form-control mb-2 mb-md-0 category-form-input"
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                value={newCategoryName}
                onChange={(e) => setNewCategoryName(e.target.value)}
                disabled={isLoading}
                onKeyPress={(e) => {
                  if (e.key === 'Enter' && newCategoryName.trim()) {
                    handleCreateCategory();
                  }
                }}
              />
            </div>
            <div className="mt-2">
              <label className="form-label text-muted small">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:</label>
              <ColorPalette
                selectedColor={newCategoryColor}
                onColorSelect={setNewCategoryColor}
                className="mb-2"
              />
            </div>
            <div className="d-flex gap-2">
              <button
                type="button"
                className="btn btn-success btn-sm settings-form-control"
                onClick={handleCreateCategory}
                disabled={isLoading || !newCategoryName.trim()}
              >
                <FaCheck size={12} />
              </button>
              <button
                type="button"
                className="btn btn-outline-secondary category-cancel-btn"
                onClick={() => {
                  setShowNewCategoryForm(false);
                  setNewCategoryName('');
                  setNewCategoryColor(COLOR_PALETTE[0]);
                }}
                disabled={isLoading}
              >
                ‚úï
              </button>
            </div>
          </div>
        </div>
      )}

      {/* –î—Ä–µ–≤–æ–≤–∏–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      <div className="categories-tree">
        {categories.map((category, index) => (
          <div key={category.id} className="category-node mb-4">
            {/* –ì–ª–∞–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è */}
            <div 
              className="card shadow-sm category-card"
              style={{
                borderLeft: `4px solid ${category.color || '#3498db'}`
              }}
            >
              <div className="card-header d-flex justify-content-between align-items-center py-3">
                <div className="d-flex align-items-center flex-grow-1">
                  {/* –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è/—Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è */}
                  <button
                    type="button"
                    className="btn btn-link p-0 me-3 text-decoration-none"
                    onClick={() => toggleCategoryCollapse(category.id)}
                    title={collapsedCategories.has(category.id) ? "–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é" : "–°–≤–µ—Ä–Ω—É—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"}
                  >
                    {collapsedCategories.has(category.id) ? (
                      <FaChevronRight size={14} className="text-muted" />
                    ) : (
                      <FaChevronDown size={14} className="text-muted" />
                    )}
                  </button>
                  
                  {editingCategory === category.id ? (
                    <div className="flex-grow-1">
                      <div className="d-flex gap-2 mb-2">
                        <input
                          type="text"
                          className="form-control settings-form-control"
                          value={editCategoryName}
                          onChange={(e) => setEditCategoryName(e.target.value)}
                          disabled={isLoading}
                          onKeyPress={(e) => {
                            if (e.key === 'Enter' && editCategoryName.trim()) {
                              handleEditCategory(category.id);
                            }
                          }}
                        />
                        <button
                          type="button"
                          className="btn btn-success btn-sm settings-form-control"
                          onClick={() => handleEditCategory(category.id)}
                          disabled={isLoading || !editCategoryName.trim()}
                        >
                          <FaCheck size={12} />
                        </button>
                        <button
                          type="button"
                          className="btn btn-outline-secondary btn-sm settings-form-control"
                          onClick={() => {
                            setEditingCategory(null);
                            setEditCategoryName('');
                            setEditCategoryColor('');
                          }}
                          disabled={isLoading}
                        >
                          ‚úï
                        </button>
                      </div>
                      <div>
                        <label className="form-label text-muted small">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:</label>
                        <ColorPalette
                          selectedColor={editCategoryColor}
                          onColorSelect={setEditCategoryColor}
                        />
                      </div>
                    </div>
                  ) : (
                    <div>
                      <h5 className="mb-1">
                        {category.name}
                      </h5>
                      <small className="text-muted">
                        {category.subcategories?.length || 0} –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
                      </small>
                    </div>
                  )}
                </div>
                
                {!editingCategory && (
                  <div className="btn-group">
                    <button
                      type="button"
                      className="btn btn-outline-primary btn-sm"
                      onClick={() => {
                        setEditingCategory(category.id);
                        setEditCategoryName(category.name);
                        setEditCategoryColor(category.color || COLOR_PALETTE[0]);
                      }}
                      disabled={isLoading}
                      title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                    >
                      <FaEdit />
                    </button>
                    <button
                      type="button"
                      className="btn btn-outline-danger btn-sm"
                      onClick={() => handleDeleteCategory(category.id)}
                      disabled={isLoading}
                      title="–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                    >
                      <FaTrash />
                    </button>
                  </div>
                )}
              </div>
              
              {/* –°–µ–∫—Ü–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–≤–µ—Ä–Ω—É—Ç–∞ */}
              {!collapsedCategories.has(category.id) && (
                <div className="card-body pt-0">
                  <div className="d-flex justify-content-between align-items-center mb-3">
                    <div className="d-flex align-items-center">
                      <span className="me-2 text-muted">‚îî‚îÄ‚îÄ</span>
                      <h6 className="mb-0 text-muted">–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h6>
                    </div>
                    <button
                      type="button"
                      className="btn btn-outline-success btn-sm add-subcategory-btn"
                      onClick={() => setShowNewSubcategoryForm(category.id)}
                      disabled={isLoading}
                    >
                      <FaPlus className="me-2" size={12} />
                      –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    </button>
                  </div>

                  {/* –§–æ—Ä–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                  {showNewSubcategoryForm === category.id && (
                    <div className="mb-3 p-3 rounded subcategory-form">
                      <div className="d-flex align-items-center mb-2">
                        <span className="me-2">‚îú‚îÄ ‚ûï</span>
                        <small className="text-muted">–ù–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è</small>
                      </div>
                      <div className="d-flex gap-2 mb-2">
                        <input
                          type="text"
                          className="form-control form-control-sm settings-form-control"
                          placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏..."
                          value={newSubcategoryName}
                          onChange={(e) => setNewSubcategoryName(e.target.value)}
                          disabled={isLoading}
                          onKeyPress={(e) => {
                            if (e.key === 'Enter' && newSubcategoryName.trim()) {
                              handleCreateSubcategory(category.id);
                            }
                          }}
                        />
                        <button
                          type="button"
                          className="btn btn-success btn-sm settings-form-control"
                          onClick={() => handleCreateSubcategory(category.id)}
                          disabled={isLoading || !newSubcategoryName.trim()}
                        >
                          <FaCheck size={12} />
                        </button>
                        <button
                          type="button"
                          className="btn btn-outline-secondary btn-sm settings-form-control"
                          onClick={() => {
                            setShowNewSubcategoryForm(null);
                            setNewSubcategoryName('');
                            setNewSubcategoryColor(COLOR_PALETTE[0]);
                          }}
                          disabled={isLoading}
                        >
                          ‚úï
                        </button>
                      </div>
                      <div>
                        <label className="form-label text-muted small">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:</label>
                        <ColorPalette
                          selectedColor={newSubcategoryColor}
                          onColorSelect={setNewSubcategoryColor}
                        />
                      </div>
                    </div>
                  )}

                  {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
                  {category.subcategories && category.subcategories.length > 0 ? (
                    <div className="subcategories-tree ps-3">
                      {category.subcategories.map((subcategory, subIndex) => (
                        <div 
                          key={subcategory.id} 
                          className="subcategory-item d-flex justify-content-between align-items-center p-3 mb-2"
                          style={{
                            borderLeft: `3px solid ${subcategory.color || '#3498db'}`
                          }}
                        >
                          <div className="d-flex align-items-center">
                            <span className="me-2 text-muted">
                              {subIndex === category.subcategories.length - 1 ? '‚îî‚îÄ' : '‚îú‚îÄ'}
                            </span>
                            {/* –ò–∫–æ–Ω–∫–∞ —Ñ–∞–π–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ –ø—Ä–æ—Å—å–±–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
                            {editingSubcategory === subcategory.id ? (
                              <div className="flex-grow-1">
                                <div className="d-flex gap-2 mb-2">
                                  <input
                                    type="text"
                                    className="form-control form-control-sm settings-form-control"
                                    value={editSubcategoryName}
                                    onChange={(e) => setEditSubcategoryName(e.target.value)}
                                    disabled={isLoading}
                                    onKeyPress={(e) => {
                                      if (e.key === 'Enter' && editSubcategoryName.trim()) {
                                        handleEditSubcategory(subcategory.id);
                                      }
                                    }}
                                  />
                                  <button
                                    type="button"
                                    className="btn btn-success btn-sm settings-form-control"
                                    onClick={() => handleEditSubcategory(subcategory.id)}
                                    disabled={isLoading || !editSubcategoryName.trim()}
                                  >
                                    <FaCheck size={12} />
                                  </button>
                                  <button
                                    type="button"
                                    className="btn btn-outline-secondary btn-sm settings-form-control"
                                    onClick={() => {
                                      setEditingSubcategory(null);
                                      setEditSubcategoryName('');
                                      setEditSubcategoryColor('');
                                    }}
                                    disabled={isLoading}
                                  >
                                    ‚úï
                                  </button>
                                </div>
                                <div>
                                  <label className="form-label text-muted small">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:</label>
                                  <ColorPalette
                                    selectedColor={editSubcategoryColor}
                                    onColorSelect={setEditSubcategoryColor}
                                  />
                                </div>
                              </div>
                            ) : (
                              <span>
                                {subcategory.name}
                              </span>
                            )}
                          </div>
                          
                          {!editingSubcategory && (
                            <div className="btn-group action-btn-group">
                              <button
                                type="button"
                                className="btn btn-outline-primary btn-sm"
                                onClick={() => {
                                  setEditingSubcategory(subcategory.id);
                                  setEditSubcategoryName(subcategory.name);
                                  setEditSubcategoryColor(subcategory.color || COLOR_PALETTE[0]);
                                }}
                                disabled={isLoading}
                                title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                              >
                                <FaEdit size={12} />
                              </button>
                              <button
                                type="button"
                                className="btn btn-outline-danger btn-sm"
                                onClick={() => handleDeleteSubcategory(subcategory.id)}
                                disabled={isLoading}
                                title="–£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é"
                              >
                                <FaTrash size={12} />
                              </button>
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  ) : (
                    <div className="text-center text-muted py-4">
                      <div className="mb-2">üì≠</div>
                      <small>–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</small>
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      {categories.length === 0 && !isLoading && (
        <div className="text-center text-muted empty-state">
          <div className="mb-4">
            <FaCog size={64} className="empty-state-icon" />
          </div>
          <h5 className="mb-3">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</h5>
          <p className="mb-4">–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π.</p>
          <button 
            className="btn btn-primary empty-state-btn"
            onClick={() => setShowNewCategoryForm(true)}
          >
            <FaPlus className="me-2" />
            –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
          </button>
        </div>
      )}
    </div>
  );

  return (
    <div className="container mt-4">
      <div className="mb-4">
        <Link to="/" className="btn btn-outline-secondary">
          <FaArrowLeft className="me-2" /> –ù–∞–∑–∞–¥ –∫ –Ω–∞–≤—ã–∫–∞–º
        </Link>
      </div>

      <div className="card">
        <div className="card-header d-flex justify-content-between align-items-center">
          <h2 className="mb-0">
            <FaCog className="me-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
          </h2>
        </div>
        <div className="card-body">
          {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –≤–∫–ª–∞–¥–∫–∞–º */}
          <div className="mb-4">
            <div className="d-flex gap-2 tab-nav">
              <button
                className={`btn tab-button ${activeTab === 'profile' ? 'btn-primary' : 'btn-outline-secondary'}`}
                onClick={() => setActiveTab('profile')}
              >
                üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
              </button>
              
              <button
                className={`btn tab-button ${activeTab === 'hierarchy' ? 'btn-primary' : 'btn-outline-secondary'}`}
                onClick={() => setActiveTab('hierarchy')}
              >
                üóÇÔ∏è –ò–µ—Ä–∞—Ä—Ö–∏—è
                {hasUnsavedChanges && activeTab === 'hierarchy' && (
                  <span className="badge bg-warning text-dark ms-2">
                    *
                  </span>
                )}
              </button>
            </div>
          </div>

          {/* –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–æ–∫ */}
          <div className="tab-content-area">
            {activeTab === 'profile' && renderProfileTab()}
            {activeTab === 'hierarchy' && (
              <>
                {isLoading && (
                  <div className="loading-container">
                    <div className="spinner-border text-primary" role="status">
                      <span className="visually-hidden">–ó–∞–≥—Ä—É–∑–∫–∞...</span>
                    </div>
                  </div>
                )}
                {renderHierarchyTab()}
              </>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings;
