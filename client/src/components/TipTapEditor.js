import React, { useImperativeHandle, forwardRef, useState, useEffect, useRef } from 'react';
import { useEditor, EditorContent } from '@tiptap/react';
import StarterKit from '@tiptap/starter-kit';
import Link from '@tiptap/extension-link';
import { TextStyle } from '@tiptap/extension-text-style';
import { Color } from '@tiptap/extension-color';
import { Table, TableRow, TableHeader, TableCell } from '@tiptap/extension-table';
import InfoBlock from './InfoBlock';
import { ResizableImage } from './ResizableImage';
import './TipTapEditor.css';

const TipTapEditor = forwardRef(({ value, onChange, placeholder = '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...' }, ref) => {
  const [showBlockMenu, setShowBlockMenu] = useState(false);
  const [showTableMenu, setShowTableMenu] = useState(false);
  const [showToolsMenu, setShowToolsMenu] = useState(false);
  const [contextMenu, setContextMenu] = useState({ show: false, x: 0, y: 0, type: null });
  const dropdownRef = useRef(null);
  const tableDropdownRef = useRef(null);
  const toolsDropdownRef = useRef(null);
  const contextMenuRef = useRef(null);
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –Ω–∞–¥ –∫—É—Ä—Å–æ—Ä–æ–º
  const getMenuPosition = (x, y) => {
    const offset = 8; // –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø –Ω–∞–¥ –∫—É—Ä—Å–æ—Ä–æ–º
    const menuWidth = 800; // –ø—Ä–∏–º–µ—Ä–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –º–µ–Ω—é
    let finalX = x - menuWidth / 2; // —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –º–µ–Ω—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫—É—Ä—Å–æ—Ä–∞
    let finalY = y - offset;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –º–µ–Ω—é –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–æ –∑–∞ –ª–µ–≤—ã–π –∫—Ä–∞–π
    if (finalX < 0) {
      finalX = 10;
    }
    if (finalX + menuWidth > window.innerWidth) {
      finalX = window.innerWidth - menuWidth - 10;
    }
    
    // –ï—Å–ª–∏ –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–≤–µ—Ä—Ö—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—É—Ç—å –Ω–∏–∂–µ –∫—É—Ä—Å–æ—Ä–∞
    if (finalY < 0) {
      finalY = y + offset;
    }
    return { x: finalX, y: finalY };
  };

  const blockTypes = [
    { id: 'info', label: '–≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ!', icon: 'üí°', color: '#17a2b8' },
    { id: 'warning', label: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ', icon: '‚ö†Ô∏è', color: '#ffc107' },
    { id: 'example', label: '–ü—Ä–∏–º–µ—Ä', icon: 'üìù', color: '#28a745' },
    { id: 'note', label: '–ó–∞–º–µ—Ç–∫–∞', icon: 'üìå', color: '#6f42c1' },
    { id: 'simple', label: '–ë–ª–æ–∫', icon: 'üìÑ', color: '#6c757d' },
  ];

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
        setShowBlockMenu(false);
      }
      if (tableDropdownRef.current && !tableDropdownRef.current.contains(event.target)) {
        setShowTableMenu(false);
      }
      if (toolsDropdownRef.current && !toolsDropdownRef.current.contains(event.target)) {
        setShowToolsMenu(false);
      }
      if (contextMenuRef.current && !contextMenuRef.current.contains(event.target)) {
        setContextMenu({ show: false, x: 0, y: 0, type: null });
      }
    };

    const handleResize = () => {
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
      if (contextMenu.show) {
        setContextMenu({ show: false, x: 0, y: 0, type: null });
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    window.addEventListener('resize', handleResize);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
      window.removeEventListener('resize', handleResize);
    };
  }, [contextMenu.show]);

  // –î–µ–±–∞—É–Ω—Å–∏–Ω–≥ –¥–ª—è onUpdate
  const debouncedOnChange = useRef(null);
  
  useEffect(() => {
    debouncedOnChange.current = (html) => {
      setTimeout(() => onChange(html), 0);
    };
  }, [onChange]);

  const editor = useEditor({
    extensions: [
      StarterKit.configure({
        heading: {
          levels: [1, 2, 3, 4, 5, 6],
        },
      }),
      ResizableImage.configure({
        HTMLAttributes: {
          class: 'tiptap-resizable-image',
        },
      }),
      Link.configure({
        openOnClick: false,
        HTMLAttributes: {
          class: 'tiptap-link',
        },
      }),
      TextStyle,
      Color,
      Table.configure({
        resizable: true,
        handleWidth: 8,
        cellMinWidth: 100,
        lastColumnResizable: true,
        allowTableNodeSelection: true,
      }),
      TableRow,
      TableHeader,
      TableCell,
      InfoBlock, // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π InfoBlock
    ],
    content: value || '',
    onUpdate: ({ editor }) => {
      const html = editor.getHTML();
      if (debouncedOnChange.current) {
        debouncedOnChange.current(html);
      }
    },
    editorProps: {
      attributes: {
        class: 'tiptap-editor-content',
      },
      handleDOMEvents: {
        contextmenu: (view, event) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ —Ç–∞–±–ª–∏—Ü–µ
          const { state } = view;
          const { selection } = state;
          const { $from } = selection;
          
          // –ò—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Ç–∞–±–ª–∏—Ü—ã
          let isInTable = false;
          for (let depth = $from.depth; depth > 0; depth--) {
            const node = $from.node(depth);
            if (node.type.name === 'table') {
              isInTable = true;
              break;
            }
          }
          
          if (isInTable) {
            event.preventDefault();
            
            // –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –º–µ–Ω—é –Ω–∞–¥ –∫—É—Ä—Å–æ—Ä–æ–º
            const position = getMenuPosition(event.clientX, event.clientY);
            
            setContextMenu({
              show: true,
              x: position.x,
              y: position.y,
              type: 'table'
            });
            return true; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
          }
          
          return false; // –ü–æ–∑–≤–æ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –Ω–µ-—Ç–∞–±–ª–∏—Ü
        }
      }
    },
  });

  // –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ ref
  useImperativeHandle(ref, () => ({
    getEditor: () => editor,
    insertImage: (url) => {
      if (editor) {
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
        const currentSelection = editor.state.selection;
        editor.chain()
          .focus()
          .setTextSelection(currentSelection.anchor)
          .setResizableImage({ src: url })
          .run();
      }
    },
    insertText: (text, style = null) => {
      if (editor) {
        const chain = editor.chain().focus();
        if (style === 'italic') {
          chain.insertContent(`<em>${text}</em>`);
        } else {
          chain.insertContent(text);
        }
        chain.run();
      }
    },
    deleteText: (length) => {
      if (editor) {
        // TipTap –Ω–µ –∏–º–µ–µ—Ç –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–æ–≥–∞ deleteText
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å undo –∏–ª–∏ –¥—Ä—É–≥—É—é –ª–æ–≥–∏–∫—É
        editor.chain().focus().run();
      }
    },
    setSelection: (position) => {
      if (editor) {
        editor.chain().focus().setTextSelection(position).run();
      }
    },
  }));

  if (!editor) {
    return null;
  }

  return (
    <div className="tiptap-editor">
      {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <div className="tiptap-toolbar">
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleBold().run()}
          className={editor.isActive('bold') ? 'is-active' : ''}
        >
          <strong>B</strong>
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleItalic().run()}
          className={editor.isActive('italic') ? 'is-active' : ''}
        >
          <em>I</em>
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleStrike().run()}
          className={editor.isActive('strike') ? 'is-active' : ''}
        >
          <s>S</s>
        </button>
        <div className="toolbar-separator"></div>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHeading({ level: 1 }).run()}
          className={editor.isActive('heading', { level: 1 }) ? 'is-active' : ''}
        >
          H1
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHeading({ level: 2 }).run()}
          className={editor.isActive('heading', { level: 2 }) ? 'is-active' : ''}
        >
          H2
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleHeading({ level: 3 }).run()}
          className={editor.isActive('heading', { level: 3 }) ? 'is-active' : ''}
        >
          H3
        </button>
        <div className="toolbar-separator"></div>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleBulletList().run()}
          className={editor.isActive('bulletList') ? 'is-active' : ''}
        >
          ‚Ä¢ –°–ø–∏—Å–æ–∫
        </button>
        <button
          type="button"
          onClick={() => editor.chain().focus().toggleOrderedList().run()}
          className={editor.isActive('orderedList') ? 'is-active' : ''}
        >
          1. –°–ø–∏—Å–æ–∫
        </button>
        <div className="toolbar-separator"></div>
        <div className="toolbar-separator"></div>
        <div className="info-block-dropdown" ref={dropdownRef}>
          <button
            type="button"
            onClick={() => setShowBlockMenu(!showBlockMenu)}
            className={editor.isActive('infoBlock') ? 'is-active' : ''}
          >
            üì¶ –ë–ª–æ–∫–∏ ‚ñº
          </button>
          {showBlockMenu && (
            <div className="info-block-menu">
              {blockTypes.map((blockType) => (
                <button
                  key={blockType.id}
                  type="button"
                  className="info-block-menu-item"
                  onClick={() => {
                    editor.chain().focus().toggleInfoBlock({ type: blockType.id }).run();
                    setShowBlockMenu(false);
                  }}
                  style={{ borderLeft: `4px solid ${blockType.color}` }}
                >
                  <span className="block-icon">{blockType.icon}</span>
                  <span className="block-label">{blockType.label}</span>
                </button>
              ))}
            </div>
          )}
        </div>
        <div className="toolbar-separator"></div>
        <div className="tools-dropdown" ref={toolsDropdownRef}>
          <button
            type="button"
            onClick={() => setShowToolsMenu(!showToolsMenu)}
            className={showToolsMenu ? 'is-active' : ''}
          >
            üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ‚ñº
          </button>
          {showToolsMenu && (
            <div className="tools-menu">
              <button
                type="button"
                className="tools-menu-item"
                onClick={() => {
                  editor.chain().focus().toggleBlockquote().run();
                  setShowToolsMenu(false);
                }}
              >
                <span className="tool-icon">"</span>
                <span className="tool-label">–¶–∏—Ç–∞—Ç–∞</span>
              </button>
              <button
                type="button"
                className="tools-menu-item"
                onClick={() => {
                  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
                  const currentSelection = editor.state.selection;
                  const currentPosition = currentSelection.anchor;
                  
                  const input = document.createElement('input');
                  input.setAttribute('type', 'file');
                  input.setAttribute('accept', 'image/*');
                  input.click();
                  input.onchange = (e) => {
                    const file = e.target.files[0];
                    if (file) {
                      const reader = new FileReader();
                      reader.onload = (e) => {
                        const url = e.target.result;
                        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        editor.chain()
                          .focus()
                          .setTextSelection(currentPosition)
                          .setResizableImage({ src: url })
                          .run();
                      };
                      reader.readAsDataURL(file);
                    }
                  };
                  setShowToolsMenu(false);
                }}
              >
                <span className="tool-icon">üñºÔ∏è</span>
                <span className="tool-label">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</span>
              </button>
              <div className="tools-separator"></div>
              <button
                type="button"
                className="tools-menu-item"
                onClick={() => {
                  editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
                  setShowToolsMenu(false);
                }}
                disabled={!editor.can().insertTable()}
              >
                <span className="tool-icon">üìä</span>
                <span className="tool-label">–¢–∞–±–ª–∏—Ü–∞</span>
              </button>
            </div>
          )}
        </div>
      </div>
        
      {/* –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Ç–∞–±–ª–∏—Ü */}
      {contextMenu.show && contextMenu.type === 'table' && (
        <div 
          ref={contextMenuRef}
          className="context-menu"
            style={{ 
              left: contextMenu.x, 
              top: contextMenu.y,
              position: 'fixed'
            }}
          >
            <div className="context-menu-section">
              <div className="context-menu-title">–°—Ç–æ–ª–±—Ü—ã</div>
              <button
                type="button"
                className="context-menu-item"
                onClick={() => {
                  editor.chain().focus().addColumnBefore().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().addColumnBefore()}
              >
                ‚Üê –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å–ª–µ–≤–∞
              </button>
              <button
                type="button"
                className="context-menu-item"
                onClick={() => {
                  editor.chain().focus().addColumnAfter().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().addColumnAfter()}
              >
                –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü —Å–ø—Ä–∞–≤–∞ ‚Üí
              </button>
              <button
                type="button"
                className="context-menu-item danger"
                onClick={() => {
                  editor.chain().focus().deleteColumn().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().deleteColumn()}
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ª–±–µ—Ü
              </button>
            </div>
            <div className="context-menu-separator"></div>
            <div className="context-menu-section">
              <div className="context-menu-title">–°—Ç—Ä–æ–∫–∏</div>
              <button
                type="button"
                className="context-menu-item"
                onClick={() => {
                  editor.chain().focus().addRowBefore().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().addRowBefore()}
              >
                ‚Üë –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–≤–µ—Ä—Ö—É
              </button>
              <button
                type="button"
                className="context-menu-item"
                onClick={() => {
                  editor.chain().focus().addRowAfter().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().addRowAfter()}
              >
                –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å–Ω–∏–∑—É ‚Üì
              </button>
              <button
                type="button"
                className="context-menu-item danger"
                onClick={() => {
                  editor.chain().focus().deleteRow().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().deleteRow()}
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ–∫—É
              </button>
            </div>
            <div className="context-menu-separator"></div>
            <div className="context-menu-section">
              <div className="context-menu-title">–Ø—á–µ–π–∫–∏</div>
              <button
                type="button"
                className="context-menu-item"
                onClick={() => {
                  editor.chain().focus().mergeCells().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().mergeCells()}
              >
                üîó –û–±—ä–µ–¥–∏–Ω–∏—Ç—å —è—á–µ–π–∫–∏
              </button>
              <button
                type="button"
                className="context-menu-item"
                onClick={() => {
                  editor.chain().focus().splitCell().run();
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().splitCell()}
              >
                üìù –†–∞–∑–¥–µ–ª–∏—Ç—å —è—á–µ–π–∫–∏
              </button>
            </div>
            <div className="context-menu-separator"></div>
            <div className="context-menu-section">
              <button
                type="button"
                className="context-menu-item danger"
                onClick={() => {
                  if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É?')) {
                    editor.chain().focus().deleteTable().run();
                  }
                  setContextMenu({ show: false, x: 0, y: 0, type: null });
                }}
                disabled={!editor.can().deleteTable()}
              >
                üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å—é —Ç–∞–±–ª–∏—Ü—É
              </button>
            </div>
          </div>
        )}

        {/* –û–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <EditorContent editor={editor} placeholder={placeholder} />
      </div>
    );
});

TipTapEditor.displayName = 'TipTapEditor';

export default TipTapEditor;