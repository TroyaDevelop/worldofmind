import { Node, mergeAttributes } from '@tiptap/core';

export const ResizableImage = Node.create({
  name: 'resizableImage',
  
  group: 'block',
  
  atom: true,
  
  addAttributes() {
    return {
      src: {
        default: null,
      },
      alt: {
        default: null,
      },
      title: {
        default: null,
      },
      width: {
        default: null,
      },
      height: {
        default: null,
      },
    };
  },

  parseHTML() {
    return [
      {
        tag: 'img[src]',
        getAttrs: (element) => ({
          src: element.getAttribute('src'),
          alt: element.getAttribute('alt'),
          title: element.getAttribute('title'),
          width: element.getAttribute('width'),
          height: element.getAttribute('height'),
        }),
      },
    ];
  },

  renderHTML({ HTMLAttributes }) {
    return ['img', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];
  },

  addNodeView() {
    return ({ node, updateAttributes, getPos, editor }) => {
      console.log('üèóÔ∏è Creating nodeView at position:', typeof getPos === 'function' ? getPos() : 'unknown');
      console.log('üèóÔ∏è Node attrs:', node.attrs);
      
      const container = document.createElement('div');
      container.className = 'resizable-image-container';
      container.style.position = 'relative';
      container.style.display = 'inline-block';
      container.style.maxWidth = '100%';

      const img = document.createElement('img');
      img.src = node.attrs.src;
      img.alt = node.attrs.alt || '';
      img.title = node.attrs.title || '';
      img.style.maxWidth = '100%';
      img.style.height = 'auto';
      img.style.display = 'block';
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
      if (node.attrs.width) {
        console.log('üîß Setting initial width:', node.attrs.width);
        img.style.width = node.attrs.width + 'px';
      }
      if (node.attrs.height) {
        console.log('üîß Setting initial height:', node.attrs.height);
        img.style.height = node.attrs.height + 'px';
      }

      // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      const resizeHandle = document.createElement('div');
      resizeHandle.className = 'resize-handle';
      resizeHandle.style.position = 'absolute';
      resizeHandle.style.bottom = '0';
      resizeHandle.style.right = '0';
      resizeHandle.style.width = '12px';
      resizeHandle.style.height = '12px';
      resizeHandle.style.backgroundColor = '#007bff';
      resizeHandle.style.cursor = 'nw-resize';
      resizeHandle.style.borderRadius = '2px';
      resizeHandle.style.opacity = '0';
      resizeHandle.style.transition = 'opacity 0.2s';

      let isResizing = false;
      let startX, startY, startWidth, startHeight;

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º handle –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
      container.addEventListener('mouseenter', () => {
        resizeHandle.style.opacity = '1';
      });

      container.addEventListener('mouseleave', () => {
        if (!isResizing) {
          resizeHandle.style.opacity = '0';
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      resizeHandle.addEventListener('mousedown', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        isResizing = true;
        startX = e.clientX;
        startY = e.clientY;
        startWidth = img.offsetWidth;
        startHeight = img.offsetHeight;

        const handleMouseMove = (e) => {
          if (!isResizing) return;

          const deltaX = e.clientX - startX;
          // const deltaY = e.clientY - startY; // –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

          // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
          const aspectRatio = startHeight / startWidth;
          let newWidth = startWidth + deltaX;

          // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
          if (newWidth < 50) newWidth = 50;
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ parentElement
          if (container.parentElement && newWidth > container.parentElement.offsetWidth) {
            newWidth = container.parentElement.offsetWidth;
          }

          const newHeight = newWidth * aspectRatio;

          img.style.width = newWidth + 'px';
          img.style.height = newHeight + 'px';
        };

        const handleMouseUp = () => {
          if (!isResizing) {
            return;
          }
          
          // –°—Ä–∞–∑—É —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ false –∏ —É–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
          isResizing = false;
          document.removeEventListener('mousemove', handleMouseMove);
          document.removeEventListener('mouseup', handleMouseUp);
          
          resizeHandle.style.opacity = '0';
          
          const newWidth = img.offsetWidth;
          const newHeight = img.offsetHeight;
          const currentPos = typeof getPos === 'function' ? getPos() : 'unknown';
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
          const naturalAspectRatio = img.naturalWidth / img.naturalHeight;
          const currentAspectRatio = newWidth / newHeight;
          
          let finalWidth = newWidth;
          let finalHeight = newHeight;
          
          // –ï—Å–ª–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º
          if (Math.abs(naturalAspectRatio - currentAspectRatio) > 0.1) {
            console.log('ÔøΩ Correcting aspect ratio from', currentAspectRatio, 'to', naturalAspectRatio);
            finalHeight = Math.round(finalWidth / naturalAspectRatio);
            // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫ —ç–ª–µ–º–µ–Ω—Ç—É
            img.style.height = finalHeight + 'px';
          }
          
          console.log('ÔøΩüñ±Ô∏è Resize completed at position:', currentPos, 'New size:', { width: finalWidth, height: finalHeight });
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–∞–∑–º–µ—Ä–æ–≤
          if (finalWidth <= 0 || finalHeight <= 0) {
            console.warn('‚ùå Invalid size, skipping update');
            return;
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —É–∑–ª–∞
          if (typeof updateAttributes === 'function') {
            console.log('üìù Using updateAttributes at pos:', currentPos);
            updateAttributes({
              width: finalWidth,
              height: finalHeight,
            });
          } else if (editor && typeof getPos === 'function') {
            const pos = getPos();
            console.log('üìù Using direct transaction at pos:', pos);
            if (pos !== undefined && pos !== null) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, —Ç–∞–∫ –∫–∞–∫ updateAttributes –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ
              const { state, view } = editor;
              const tr = state.tr;
              const nodeAtPos = state.doc.nodeAt(pos);
              
              console.log('ÔøΩ Node at position:', nodeAtPos?.type.name, nodeAtPos?.attrs);
              
              if (nodeAtPos && nodeAtPos.type.name === 'resizableImage') {
                const newAttrs = { ...nodeAtPos.attrs, width: finalWidth, height: finalHeight };
                console.log('üìù Setting new attrs:', newAttrs);
                tr.setNodeMarkup(pos, null, newAttrs);
                view.dispatch(tr);
                console.log('‚úÖ Direct transaction applied');
              } else {
                console.warn('‚ùå Node not found or wrong type at position:', pos);
              }
            }
          }
        };

        document.addEventListener('mousemove', handleMouseMove);
        document.addEventListener('mouseup', handleMouseUp);
      });

      container.appendChild(img);
      container.appendChild(resizeHandle);

      return {
        dom: container,
        update: (updatedNode) => {
          if (updatedNode.type !== this.type) {
            return false;
          }
          
          const currentPos = typeof getPos === 'function' ? getPos() : 'unknown';
          console.log('üîÑ Update called at position:', currentPos, 'isResizing:', isResizing);
          console.log('üìä Updated node attrs:', updatedNode.attrs);
          console.log('üìè Current img size:', { width: img.offsetWidth, height: img.offsetHeight });
          
          img.src = updatedNode.attrs.src;
          img.alt = updatedNode.attrs.alt || '';
          img.title = updatedNode.attrs.title || '';
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –≤ –∞—Ç—Ä–∏–±—É—Ç–∞—Ö
          // –∏ –ø—Ä–∏ —ç—Ç–æ–º –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
          if (!isResizing) {
            if (updatedNode.attrs.width && updatedNode.attrs.width !== img.offsetWidth) {
              console.log('üîß Setting width from attrs:', updatedNode.attrs.width, 'at pos:', currentPos);
              img.style.width = updatedNode.attrs.width + 'px';
            }
            if (updatedNode.attrs.height && updatedNode.attrs.height !== img.offsetHeight) {
              console.log('üîß Setting height from attrs:', updatedNode.attrs.height, 'at pos:', currentPos);
              img.style.height = updatedNode.attrs.height + 'px';
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ —è–≤–Ω–æ —É–±—Ä–∞–Ω—ã –∏–∑ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            if (!updatedNode.attrs.width && img.style.width) {
              console.log('üóëÔ∏è Clearing width style at pos:', currentPos);
              img.style.width = '';
            }
            if (!updatedNode.attrs.height && img.style.height) {
              console.log('üóëÔ∏è Clearing height style at pos:', currentPos);
              img.style.height = '';
            }
          } else {
            console.log('‚è∏Ô∏è Skipping size update - currently resizing at pos:', currentPos);
          }
          
          return true;
        },
      };
    };
  },

  addCommands() {
    return {
      setResizableImage: (options) => ({ commands }) => {
        // –ï—Å–ª–∏ width/height –Ω–µ –∑–∞–¥–∞–Ω—ã, —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏—Ö
        let { src, width, height, ...rest } = options;
        if (!width || !height) {
          const tempImg = document.createElement('img');
          tempImg.src = src;
          width = width || tempImg.naturalWidth || 300;
          height = height || tempImg.naturalHeight || 200;
        }
        return commands.insertContent({
          type: this.name,
          attrs: { src, width, height, ...rest },
        });
      },
    };
  },

  addProseMirrorPlugins() {
    return [];
  },
});
